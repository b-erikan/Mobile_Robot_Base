// Generated by gencpp from file base_control/base_wheel_vel.msg
// DO NOT EDIT!


#ifndef BASE_CONTROL_MESSAGE_BASE_WHEEL_VEL_H
#define BASE_CONTROL_MESSAGE_BASE_WHEEL_VEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace base_control
{
template <class ContainerAllocator>
struct base_wheel_vel_
{
  typedef base_wheel_vel_<ContainerAllocator> Type;

  base_wheel_vel_()
    : w1(0.0)
    , w2(0.0)
    , w3(0.0)
    , w4(0.0)  {
    }
  base_wheel_vel_(const ContainerAllocator& _alloc)
    : w1(0.0)
    , w2(0.0)
    , w3(0.0)
    , w4(0.0)  {
  (void)_alloc;
    }



   typedef float _w1_type;
  _w1_type w1;

   typedef float _w2_type;
  _w2_type w2;

   typedef float _w3_type;
  _w3_type w3;

   typedef float _w4_type;
  _w4_type w4;





  typedef boost::shared_ptr< ::base_control::base_wheel_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_control::base_wheel_vel_<ContainerAllocator> const> ConstPtr;

}; // struct base_wheel_vel_

typedef ::base_control::base_wheel_vel_<std::allocator<void> > base_wheel_vel;

typedef boost::shared_ptr< ::base_control::base_wheel_vel > base_wheel_velPtr;
typedef boost::shared_ptr< ::base_control::base_wheel_vel const> base_wheel_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_control::base_wheel_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_control::base_wheel_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::base_control::base_wheel_vel_<ContainerAllocator1> & lhs, const ::base_control::base_wheel_vel_<ContainerAllocator2> & rhs)
{
  return lhs.w1 == rhs.w1 &&
    lhs.w2 == rhs.w2 &&
    lhs.w3 == rhs.w3 &&
    lhs.w4 == rhs.w4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::base_control::base_wheel_vel_<ContainerAllocator1> & lhs, const ::base_control::base_wheel_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace base_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::base_control::base_wheel_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_control::base_wheel_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_control::base_wheel_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_control::base_wheel_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_control::base_wheel_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_control::base_wheel_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_control::base_wheel_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17707310464ac4213ef0607f2a232ab3";
  }

  static const char* value(const ::base_control::base_wheel_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17707310464ac421ULL;
  static const uint64_t static_value2 = 0x3ef0607f2a232ab3ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_control::base_wheel_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_control/base_wheel_vel";
  }

  static const char* value(const ::base_control::base_wheel_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_control::base_wheel_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 w1\n"
"float32 w2\n"
"float32 w3\n"
"float32 w4\n"
;
  }

  static const char* value(const ::base_control::base_wheel_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_control::base_wheel_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w1);
      stream.next(m.w2);
      stream.next(m.w3);
      stream.next(m.w4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct base_wheel_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_control::base_wheel_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_control::base_wheel_vel_<ContainerAllocator>& v)
  {
    s << indent << "w1: ";
    Printer<float>::stream(s, indent + "  ", v.w1);
    s << indent << "w2: ";
    Printer<float>::stream(s, indent + "  ", v.w2);
    s << indent << "w3: ";
    Printer<float>::stream(s, indent + "  ", v.w3);
    s << indent << "w4: ";
    Printer<float>::stream(s, indent + "  ", v.w4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_CONTROL_MESSAGE_BASE_WHEEL_VEL_H
