// Generated by gencpp from file base_control/Winkel.msg
// DO NOT EDIT!


#ifndef BASE_CONTROL_MESSAGE_WINKEL_H
#define BASE_CONTROL_MESSAGE_WINKEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace base_control
{
template <class ContainerAllocator>
struct Winkel_
{
  typedef Winkel_<ContainerAllocator> Type;

  Winkel_()
    : rotate(0.0)  {
    }
  Winkel_(const ContainerAllocator& _alloc)
    : rotate(0.0)  {
  (void)_alloc;
    }



   typedef float _rotate_type;
  _rotate_type rotate;





  typedef boost::shared_ptr< ::base_control::Winkel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_control::Winkel_<ContainerAllocator> const> ConstPtr;

}; // struct Winkel_

typedef ::base_control::Winkel_<std::allocator<void> > Winkel;

typedef boost::shared_ptr< ::base_control::Winkel > WinkelPtr;
typedef boost::shared_ptr< ::base_control::Winkel const> WinkelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_control::Winkel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_control::Winkel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::base_control::Winkel_<ContainerAllocator1> & lhs, const ::base_control::Winkel_<ContainerAllocator2> & rhs)
{
  return lhs.rotate == rhs.rotate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::base_control::Winkel_<ContainerAllocator1> & lhs, const ::base_control::Winkel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace base_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::base_control::Winkel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_control::Winkel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_control::Winkel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_control::Winkel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_control::Winkel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_control::Winkel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_control::Winkel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be12cf1d559af9e1d7c33b2780105139";
  }

  static const char* value(const ::base_control::Winkel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe12cf1d559af9e1ULL;
  static const uint64_t static_value2 = 0xd7c33b2780105139ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_control::Winkel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_control/Winkel";
  }

  static const char* value(const ::base_control::Winkel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_control::Winkel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 rotate\n"
;
  }

  static const char* value(const ::base_control::Winkel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_control::Winkel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Winkel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_control::Winkel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_control::Winkel_<ContainerAllocator>& v)
  {
    s << indent << "rotate: ";
    Printer<float>::stream(s, indent + "  ", v.rotate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_CONTROL_MESSAGE_WINKEL_H
